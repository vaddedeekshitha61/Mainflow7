# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Df-dxX_fnQmIhY3ovhNmHsHpAsuGGw4
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA

iris = load_iris()
X = iris.data
y = iris.target
target_names = iris.target_names

# Step 3: Apply PCA (reduce to 2 dimensions)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

# Step 4: Create DataFrame for visualization
df_pca = pd.DataFrame(X_pca, columns=['PC1', 'PC2'])
df_pca['target'] = y

plt.figure(figsize=(8,6))
for target, name in enumerate(target_names):
    plt.scatter(df_pca[df_pca['target']==target]['PC1'],
                df_pca[df_pca['target']==target]['PC2'],
                label=name)
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.title("PCA - Iris Dataset (2D Representation)")
plt.legend()
plt.show()

#üìç Part 2: Stock Price Prediction with ARIMA
!pip install matplotlib seaborn pandas numpy scikit-learn statsmodels --quiet

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error
import math

# 1. Load Dataset
from google.colab import files
uploaded = files.upload()  # Upload stock_prices.csv

df = pd.read_csv("stock_prices.csv")

# Convert Date to datetime
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# Handle missing values (fill forward)
df = df.fillna(method='ffill')

print("‚úÖ Dataset Loaded")
print(df.head())

# 2. Exploratory Data Analysis (EDA)
plt.figure(figsize=(12,6))
plt.plot(df['Close'], label="Close Price")
plt.title("Stock Close Price Over Time")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.show()

# Step 3: Plot Close Price
plt.figure(figsize=(10,5))
plt.plot(df['Close'])
plt.title("Apple Stock Closing Price Trend")
plt.xlabel("Date")
plt.ylabel("Close Price")
plt.show()

# Step 4: Train-Test Split
train = df.iloc[:-100]
test = df.iloc[-100:]

# Step 5: Build ARIMA Model (choose parameters manually, e.g., (5,1,0))
model = ARIMA(train['Close'], order=(5,1,0))
model_fit = model.fit()

# Step 6: Forecast
forecast = model_fit.forecast(steps=len(test))

# 3. Feature Engineering (Lag + Moving Averages)
df['Lag1'] = df['Close'].shift(1)
df['MA7'] = df['Close'].rolling(window=7).mean()
df['MA30'] = df['Close'].rolling(window=30).mean()
print("‚úÖ Added Lag and Moving Average features")

# 4. Train-Test Split
train_size = int(len(df) * 0.8)
train, test = df.iloc[:train_size], df.iloc[train_size:]

# 5. ARIMA Model Training (example: p=5,d=1,q=0)
model = ARIMA(train['Close'], order=(5,1,0))
model_fit = model.fit()

print(model_fit.summary())

# 6. Forecasting
forecast = model_fit.forecast(steps=len(test))
test['Predicted'] = forecast.values

# 7. Evaluation
mae = mean_absolute_error(test['Close'], test['Predicted'])
rmse = math.sqrt(mean_squared_error(test['Close'], test['Predicted']))
mape = np.mean(np.abs((test['Close'] - test['Predicted']) / test['Close'])) * 100

print("‚úÖ Model Evaluation")
print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"MAPE: {mape:.2f}%")

# 8. Visualization of Predictions
plt.figure(figsize=(12,6))
plt.plot(train['Close'], label="Train Data")
plt.plot(test['Close'], label="Actual Prices", color='blue')
plt.plot(test['Predicted'], label="Predicted Prices", color='red')
plt.title("Stock Price Prediction with ARIMA")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.show()